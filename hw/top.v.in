// This is a generated file. Use and modify at your own risk.
//////////////////////////////////////////////////////////////////////////////// 
// default_nettype of none prevents implicit wire declaration.
`default_nettype none
`timescale 1 ns / 1 ps

module ${MM_KERNEL_NAME} #(
  parameter integer C_S_AXI_CONTROL_ADDR_WIDTH = 12 ,
  parameter integer C_S_AXI_CONTROL_DATA_WIDTH = 32 ,
  parameter integer C_M00_AXI_NUM_THREADS      = 1  ,
  parameter integer C_M00_AXI_ID_WIDTH         = 1  ,
  parameter integer C_M00_AXI_ADDR_WIDTH       = 64 ,
  parameter integer C_M00_AXI_DATA_WIDTH       = 512,
  parameter integer C_M01_AXI_NUM_THREADS      = 1  ,
  parameter integer C_M01_AXI_ID_WIDTH         = 1  ,
  parameter integer C_M01_AXI_ADDR_WIDTH       = 64 ,
  parameter integer C_M01_AXI_DATA_WIDTH       = 512,
  parameter integer C_M02_AXI_NUM_THREADS      = 1  ,
  parameter integer C_M02_AXI_ID_WIDTH         = 1  ,
  parameter integer C_M02_AXI_ADDR_WIDTH       = 64 ,
  parameter integer C_M02_AXI_DATA_WIDTH       = 512
)
(
  // System Signals
  input  wire                                    ap_clk               ,
  input  wire                                    ap_rst_n             ,
  // AXI4 master interface m00_axi
  output wire                                    m00_axi_awvalid      ,
  input  wire                                    m00_axi_awready      ,
  output wire [C_M00_AXI_ADDR_WIDTH-1:0]         m00_axi_awaddr       ,
  output wire [C_M00_AXI_ID_WIDTH-1:0]           m00_axi_awid         ,
  output wire [8-1:0]                            m00_axi_awlen        ,
  output wire [3-1:0]                            m00_axi_awsize       ,
  output wire [2-1:0]                            m00_axi_awburst      ,
  output wire [4-1:0]                            m00_axi_awcache      ,
  output wire                                    m00_axi_wvalid       ,
  input  wire                                    m00_axi_wready       ,
  output wire [C_M00_AXI_DATA_WIDTH-1:0]         m00_axi_wdata        ,
  output wire [C_M00_AXI_DATA_WIDTH/8-1:0]       m00_axi_wstrb        ,
  output wire                                    m00_axi_wlast        ,
  input  wire                                    m00_axi_bvalid       ,
  output wire                                    m00_axi_bready       ,
  input  wire [C_M00_AXI_ID_WIDTH-1:0]           m00_axi_bid          ,
  output wire                                    m00_axi_arvalid      ,
  input  wire                                    m00_axi_arready      ,
  output wire [C_M00_AXI_ADDR_WIDTH-1:0]         m00_axi_araddr       ,
  output wire [C_M00_AXI_ID_WIDTH-1:0]           m00_axi_arid         ,
  output wire [8-1:0]                            m00_axi_arlen        ,
  output wire [3-1:0]                            m00_axi_arsize       ,
  output wire [2-1:0]                            m00_axi_arburst      ,
  output wire [4-1:0]                            m00_axi_arcache      ,
  input  wire                                    m00_axi_rvalid       ,
  output wire                                    m00_axi_rready       ,
  input  wire [C_M00_AXI_DATA_WIDTH-1:0]         m00_axi_rdata        ,
  input  wire                                    m00_axi_rlast        ,
  input  wire [C_M00_AXI_ID_WIDTH-1:0]           m00_axi_rid          ,
  // AXI4 master interface m01_axi
  output wire                                    m01_axi_awvalid      ,
  input  wire                                    m01_axi_awready      ,
  output wire [C_M01_AXI_ADDR_WIDTH-1:0]         m01_axi_awaddr       ,
  output wire [C_M01_AXI_ID_WIDTH-1:0]           m01_axi_awid         ,
  output wire [8-1:0]                            m01_axi_awlen        ,
  output wire [3-1:0]                            m01_axi_awsize       ,
  output wire [2-1:0]                            m01_axi_awburst      ,
  output wire [4-1:0]                            m01_axi_awcache      ,
  output wire                                    m01_axi_wvalid       ,
  input  wire                                    m01_axi_wready       ,
  output wire [C_M01_AXI_DATA_WIDTH-1:0]         m01_axi_wdata        ,
  output wire [C_M01_AXI_DATA_WIDTH/8-1:0]       m01_axi_wstrb        ,
  output wire                                    m01_axi_wlast        ,
  input  wire                                    m01_axi_bvalid       ,
  output wire                                    m01_axi_bready       ,
  input  wire [C_M01_AXI_ID_WIDTH-1:0]           m01_axi_bid          ,
  output wire                                    m01_axi_arvalid      ,
  input  wire                                    m01_axi_arready      ,
  output wire [C_M01_AXI_ADDR_WIDTH-1:0]         m01_axi_araddr       ,
  output wire [C_M01_AXI_ID_WIDTH-1:0]           m01_axi_arid         ,
  output wire [8-1:0]                            m01_axi_arlen        ,
  output wire [3-1:0]                            m01_axi_arsize       ,
  output wire [2-1:0]                            m01_axi_arburst      ,
  output wire [4-1:0]                            m01_axi_arcache      ,
  input  wire                                    m01_axi_rvalid       ,
  output wire                                    m01_axi_rready       ,
  input  wire [C_M01_AXI_DATA_WIDTH-1:0]         m01_axi_rdata        ,
  input  wire                                    m01_axi_rlast        ,
  input  wire [C_M01_AXI_ID_WIDTH-1:0]           m01_axi_rid          ,
  // AXI4 master interface m02_axi
  output wire                                    m02_axi_awvalid      ,
  input  wire                                    m02_axi_awready      ,
  output wire [C_M02_AXI_ADDR_WIDTH-1:0]         m02_axi_awaddr       ,
  output wire [C_M02_AXI_ID_WIDTH-1:0]           m02_axi_awid         ,
  output wire [8-1:0]                            m02_axi_awlen        ,
  output wire [3-1:0]                            m02_axi_awsize       ,
  output wire [2-1:0]                            m02_axi_awburst      ,
  output wire [4-1:0]                            m02_axi_awcache      ,
  output wire                                    m02_axi_wvalid       ,
  input  wire                                    m02_axi_wready       ,
  output wire [C_M02_AXI_DATA_WIDTH-1:0]         m02_axi_wdata        ,
  output wire [C_M02_AXI_DATA_WIDTH/8-1:0]       m02_axi_wstrb        ,
  output wire                                    m02_axi_wlast        ,
  input  wire                                    m02_axi_bvalid       ,
  output wire                                    m02_axi_bready       ,
  input  wire [C_M02_AXI_ID_WIDTH-1:0]           m02_axi_bid          ,
  output wire                                    m02_axi_arvalid      ,
  input  wire                                    m02_axi_arready      ,
  output wire [C_M02_AXI_ADDR_WIDTH-1:0]         m02_axi_araddr       ,
  output wire [C_M02_AXI_ID_WIDTH-1:0]           m02_axi_arid         ,
  output wire [8-1:0]                            m02_axi_arlen        ,
  output wire [3-1:0]                            m02_axi_arsize       ,
  output wire [2-1:0]                            m02_axi_arburst      ,
  output wire [4-1:0]                            m02_axi_arcache      ,
  input  wire                                    m02_axi_rvalid       ,
  output wire                                    m02_axi_rready       ,
  input  wire [C_M02_AXI_DATA_WIDTH-1:0]         m02_axi_rdata        ,
  input  wire                                    m02_axi_rlast        ,
  input  wire [C_M02_AXI_ID_WIDTH-1:0]           m02_axi_rid          ,
  // AXI4-Lite slave interface
  input  wire                                    s_axi_control_awvalid,
  output wire                                    s_axi_control_awready,
  input  wire [C_S_AXI_CONTROL_ADDR_WIDTH-1:0]   s_axi_control_awaddr ,
  input  wire                                    s_axi_control_wvalid ,
  output wire                                    s_axi_control_wready ,
  input  wire [C_S_AXI_CONTROL_DATA_WIDTH-1:0]   s_axi_control_wdata  ,
  input  wire [C_S_AXI_CONTROL_DATA_WIDTH/8-1:0] s_axi_control_wstrb  ,
  input  wire                                    s_axi_control_arvalid,
  output wire                                    s_axi_control_arready,
  input  wire [C_S_AXI_CONTROL_ADDR_WIDTH-1:0]   s_axi_control_araddr ,
  output wire                                    s_axi_control_rvalid ,
  input  wire                                    s_axi_control_rready ,
  output wire [C_S_AXI_CONTROL_DATA_WIDTH-1:0]   s_axi_control_rdata  ,
  output wire [2-1:0]                            s_axi_control_rresp  ,
  output wire                                    s_axi_control_bvalid ,
  input  wire                                    s_axi_control_bready ,
  output wire [2-1:0]                            s_axi_control_bresp  
);

///////////////////////////////////////////////////////////////////////////////
// Wires and Variables
///////////////////////////////////////////////////////////////////////////////
reg                                 areset                         = 1'b0;

// Register and invert reset signal.
always @(posedge ap_clk) begin
  areset <= ~ap_rst_n;
end

///////////////////////////////////////////////////////////////////////////////
// Begin kernel code
///////////////////////////////////////////////////////////////////////////////

${MM_ENTRY_FUNCTION} mm_hls (
    .s_axi_control_AWVALID(s_axi_control_awvalid),
    .s_axi_control_AWREADY(s_axi_control_awready),
    .s_axi_control_AWADDR(s_axi_control_awaddr),
    .s_axi_control_WVALID(s_axi_control_wvalid),
    .s_axi_control_WREADY(s_axi_control_wready),
    .s_axi_control_WDATA(s_axi_control_wdata),
    .s_axi_control_WSTRB(s_axi_control_wstrb),
    .s_axi_control_ARVALID(s_axi_control_arvalid),
    .s_axi_control_ARREADY(s_axi_control_arready),
    .s_axi_control_ARADDR(s_axi_control_araddr),
    .s_axi_control_RVALID(s_axi_control_rvalid),
    .s_axi_control_RREADY(s_axi_control_rready),
    .s_axi_control_RDATA(s_axi_control_rdata),
    .s_axi_control_RRESP(s_axi_control_rresp),
    .s_axi_control_BVALID(s_axi_control_bvalid),
    .s_axi_control_BREADY(s_axi_control_bready),
    .s_axi_control_BRESP(s_axi_control_bresp),
    .ap_clk(ap_clk),
    .ap_rst_n(ap_rst_n),
    .interrupt(),
    .m_axi_gmem0_AWVALID(m00_axi_awvalid),
    .m_axi_gmem0_AWREADY(m00_axi_awready),
    .m_axi_gmem0_AWADDR(m00_axi_awaddr),
    .m_axi_gmem0_AWID(m00_axi_awid),
    .m_axi_gmem0_AWLEN(m00_axi_awlen),
    .m_axi_gmem0_AWSIZE(m00_axi_awsize),
    .m_axi_gmem0_AWBURST(m00_axi_awburst),
    .m_axi_gmem0_AWLOCK(),
    .m_axi_gmem0_AWCACHE(m00_axi_awcache),
    .m_axi_gmem0_AWPROT(),
    .m_axi_gmem0_AWQOS(),
    .m_axi_gmem0_AWREGION(),
    .m_axi_gmem0_AWUSER(),
    .m_axi_gmem0_WVALID(m00_axi_wvalid),
    .m_axi_gmem0_WREADY(m00_axi_wready),
    .m_axi_gmem0_WDATA(m00_axi_wdata),
    .m_axi_gmem0_WSTRB(m00_axi_wstrb),
    .m_axi_gmem0_WLAST(m00_axi_wlast),
    .m_axi_gmem0_WID(),
    .m_axi_gmem0_WUSER(),
    .m_axi_gmem0_ARVALID(m00_axi_arvalid),
    .m_axi_gmem0_ARREADY(m00_axi_arready),
    .m_axi_gmem0_ARADDR(m00_axi_araddr),
    .m_axi_gmem0_ARID(m00_axi_arid),
    .m_axi_gmem0_ARLEN(m00_axi_arlen),
    .m_axi_gmem0_ARSIZE(m00_axi_arsize),
    .m_axi_gmem0_ARBURST(m00_axi_arburst),
    .m_axi_gmem0_ARLOCK(),
    .m_axi_gmem0_ARCACHE(m00_axi_arcache),
    .m_axi_gmem0_ARPROT(),
    .m_axi_gmem0_ARQOS(),
    .m_axi_gmem0_ARREGION(),
    .m_axi_gmem0_ARUSER(),
    .m_axi_gmem0_RVALID(m00_axi_rvalid),
    .m_axi_gmem0_RREADY(m00_axi_rready),
    .m_axi_gmem0_RDATA(m00_axi_rdata),
    .m_axi_gmem0_RLAST(m00_axi_rlast),
    .m_axi_gmem0_RID(m00_axi_rid),
    .m_axi_gmem0_RUSER(),
    .m_axi_gmem0_RRESP(),
    .m_axi_gmem0_BVALID(m00_axi_bvalid),
    .m_axi_gmem0_BREADY(m00_axi_bready),
    .m_axi_gmem0_BRESP(),
    .m_axi_gmem0_BID(m00_axi_bid),
    .m_axi_gmem0_BUSER(),
    .m_axi_gmem1_AWVALID(m01_axi_awvalid),
    .m_axi_gmem1_AWREADY(m01_axi_awready),
    .m_axi_gmem1_AWADDR(m01_axi_awaddr),
    .m_axi_gmem1_AWID(m01_axi_awid),
    .m_axi_gmem1_AWLEN(m01_axi_awlen),
    .m_axi_gmem1_AWSIZE(m01_axi_awsize),
    .m_axi_gmem1_AWBURST(m01_axi_awburst),
    .m_axi_gmem1_AWLOCK(),
    .m_axi_gmem1_AWCACHE(m01_axi_awcache),
    .m_axi_gmem1_AWPROT(),
    .m_axi_gmem1_AWQOS(),
    .m_axi_gmem1_AWREGION(),
    .m_axi_gmem1_AWUSER(),
    .m_axi_gmem1_WVALID(m01_axi_wvalid),
    .m_axi_gmem1_WREADY(m01_axi_wready),
    .m_axi_gmem1_WDATA(m01_axi_wdata),
    .m_axi_gmem1_WSTRB(m01_axi_wstrb),
    .m_axi_gmem1_WLAST(m01_axi_wlast),
    .m_axi_gmem1_WID(),
    .m_axi_gmem1_WUSER(),
    .m_axi_gmem1_ARVALID(m01_axi_arvalid),
    .m_axi_gmem1_ARREADY(m01_axi_arready),
    .m_axi_gmem1_ARADDR(m01_axi_araddr),
    .m_axi_gmem1_ARID(m01_axi_arid),
    .m_axi_gmem1_ARLEN(m01_axi_arlen),
    .m_axi_gmem1_ARSIZE(m01_axi_arsize),
    .m_axi_gmem1_ARBURST(m01_axi_arburst),
    .m_axi_gmem1_ARLOCK(),
    .m_axi_gmem1_ARCACHE(m01_axi_arcache),
    .m_axi_gmem1_ARPROT(),
    .m_axi_gmem1_ARQOS(),
    .m_axi_gmem1_ARREGION(),
    .m_axi_gmem1_ARUSER(),
    .m_axi_gmem1_RVALID(m01_axi_rvalid),
    .m_axi_gmem1_RREADY(m01_axi_rready),
    .m_axi_gmem1_RDATA(m01_axi_rdata),
    .m_axi_gmem1_RLAST(m01_axi_rlast),
    .m_axi_gmem1_RID(m01_axi_rid),
    .m_axi_gmem1_RUSER(),
    .m_axi_gmem1_RRESP(),
    .m_axi_gmem1_BVALID(m01_axi_bvalid),
    .m_axi_gmem1_BREADY(m01_axi_bready),
    .m_axi_gmem1_BRESP(),
    .m_axi_gmem1_BID(m01_axi_bid),
    .m_axi_gmem1_BUSER(),
    .m_axi_gmem2_AWVALID(m02_axi_awvalid),
    .m_axi_gmem2_AWREADY(m02_axi_awready),
    .m_axi_gmem2_AWADDR(m02_axi_awaddr),
    .m_axi_gmem2_AWID(m02_axi_awid),
    .m_axi_gmem2_AWLEN(m02_axi_awlen),
    .m_axi_gmem2_AWSIZE(m02_axi_awsize),
    .m_axi_gmem2_AWBURST(m02_axi_awburst),
    .m_axi_gmem2_AWLOCK(),
    .m_axi_gmem2_AWCACHE(m02_axi_awcache),
    .m_axi_gmem2_AWPROT(),
    .m_axi_gmem2_AWQOS(),
    .m_axi_gmem2_AWREGION(),
    .m_axi_gmem2_AWUSER(),
    .m_axi_gmem2_WVALID(m02_axi_wvalid),
    .m_axi_gmem2_WREADY(m02_axi_wready),
    .m_axi_gmem2_WDATA(m02_axi_wdata),
    .m_axi_gmem2_WSTRB(m02_axi_wstrb),
    .m_axi_gmem2_WLAST(m02_axi_wlast),
    .m_axi_gmem2_WID(),
    .m_axi_gmem2_WUSER(),
    .m_axi_gmem2_ARVALID(m02_axi_arvalid),
    .m_axi_gmem2_ARREADY(m02_axi_arready),
    .m_axi_gmem2_ARADDR(m02_axi_araddr),
    .m_axi_gmem2_ARID(m02_axi_arid),
    .m_axi_gmem2_ARLEN(m02_axi_arlen),
    .m_axi_gmem2_ARSIZE(m02_axi_arsize),
    .m_axi_gmem2_ARBURST(m02_axi_arburst),
    .m_axi_gmem2_ARLOCK(),
    .m_axi_gmem2_ARCACHE(m02_axi_arcache),
    .m_axi_gmem2_ARPROT(),
    .m_axi_gmem2_ARQOS(),
    .m_axi_gmem2_ARREGION(),
    .m_axi_gmem2_ARUSER(),
    .m_axi_gmem2_RVALID(m02_axi_rvalid),
    .m_axi_gmem2_RREADY(m02_axi_rready),
    .m_axi_gmem2_RDATA(m02_axi_rdata),
    .m_axi_gmem2_RLAST(m02_axi_rlast),
    .m_axi_gmem2_RID(m02_axi_rid),
    .m_axi_gmem2_RUSER(),
    .m_axi_gmem2_RRESP(),
    .m_axi_gmem2_BVALID(m02_axi_bvalid),
    .m_axi_gmem2_BREADY(m02_axi_bready),
    .m_axi_gmem2_BRESP(),
    .m_axi_gmem2_BID(m02_axi_bid),
    .m_axi_gmem2_BUSER(),
);

endmodule
`default_nettype wire
