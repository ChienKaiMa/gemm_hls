/// @author    Johannes de Fine Licht (definelicht@inf.ethz.ch)
/// @date      June 2018 
/// @copyright This software is copyrighted under the BSD 3-Clause License. 

#pragma once

#include <cstddef>
#include "hlslib/Operators.h"
#include <cstdint>
#include "hls_half.h"

using Data_t = ${MM_DATA_TYPE}; 
constexpr int kMemoryWidthBytesK = ${MM_MEMORY_BUS_WIDTH_K};
constexpr int kMemoryWidthBytesM = ${MM_MEMORY_BUS_WIDTH_M};
#ifndef MM_DYNAMIC_SIZES
constexpr unsigned long kSizeN = ${MM_SIZE_N};
constexpr unsigned long kSizeK = ${MM_SIZE_K};
constexpr unsigned long kSizeM = ${MM_SIZE_M};
#endif
constexpr unsigned long kOuterTileSizeN = ${MM_MEMORY_TILE_SIZE_N};
constexpr unsigned long kOuterTileSizeM = ${MM_MEMORY_TILE_SIZE_M};
constexpr unsigned long kInnerTileSizeN = ${MM_PARALLELISM_N};
constexpr int kComputeTileSizeM = ${MM_PARALLELISM_M};
constexpr int kComputeTileSizeN = ${MM_GRANULARITY_N};
constexpr int kTransposeWidthBytes = ${MM_TRANSPOSE_WIDTH};
constexpr float kFrequency = ${MM_TARGET_CLOCK};
constexpr auto kGoldenDir = "${MM_GOLDEN_DIR}"; 

using OperatorMap = hlslib::op::${MM_MAP_OP}<Data_t>;
using OperatorReduce = hlslib::op::${MM_REDUCE_OP}<Data_t>;

#if ${MM_MEMORY_BUS_WIDTH_M} != ${MM_KERNEL_WIDTH_M} 
  #define MM_CONVERT_B
#endif

#if ${MM_GRANULARITY_N} != 1
  #define MM_CONVERT_A
#endif
